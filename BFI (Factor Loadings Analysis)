# Initialize a new category mapping
new_categories <- list(
  Extraversion = intersect(original_factors$Extraversion, selected_items),
  Agreeableness = intersect(original_factors$Agreeableness, selected_items),
  Conscientiousness = intersect(original_factors$Conscientiousness, selected_items),
  Neuroticism = intersect(original_factors$Neuroticism, selected_items),
  Openness = intersect(original_factors$Openness, selected_items)
)

# Flatten the new categories into a single vector
mapped_items <- unlist(new_categories)

# Subset the reduced dataset based on the mapped items
reduced_data <- bfi_numeric[, mapped_items]

# Create category labels with indices for the items
item_labels <- unlist(lapply(names(new_categories), function(category) {
  items <- new_categories[[category]]
  paste0(category, " ", seq_along(items))  # Label items as "Category 1", "Category 2", etc.
}))

# Step 4: Perform Exploratory Factor Analysis (EFA)
# Perform EFA with varimax rotation, assuming 5 factors (one for each personality trait)
efa_result <- fa(reduced_data, nfactors = 5, rotate = "varimax")

# Step 5: Extract and process factor loadings
# Get the factor loadings matrix
factor_loadings <- efa_result$loadings

# Convert to a data frame for easier handling
loadings_df <- as.data.frame(unclass(factor_loadings))

# Add the category labels as the Item column
loadings_df$Item <- item_labels

# Bold significant loadings (e.g., > 0.30 or < -0.30) for clarity
format_bold <- function(x) {
  ifelse(abs(x) > 0.30, sprintf("**%.2f**", x), sprintf("%.2f", x))
}
loadings_bold <- as.data.frame(apply(loadings_df[,-ncol(loadings_df)], 2, format_bold))
loadings_bold$Item <- loadings_df$Item

# Reorder columns for clarity
loadings_bold <- loadings_bold[, c("Item", paste0("MR", 1:5))]  # MR1, MR2, ..., MR5

# Step 6: Create a formatted table
kable(
  loadings_bold,
  col.names = c("Item", "Factor 1", "Factor 2", "Factor 3", "Factor 4", "Factor 5"),
  caption = "Factor loadings (after rotation) for an exploratory factor analysis on the reduced survey."
)
